def crc32_compute(p_data, size, p_crc):
    crc = 0xFFFFFFFF if p_crc is None else ~p_crc

    for byte in p_data[:size]:
        crc = crc ^ byte
        for _ in range(8):
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1))

    return ~crc & 0xFFFFFFFF

# Example usage
input_data = [
     0x12,0x8A,  0x01,0x0A,  0x44,0x08,  0x01,0x12,
     0x40,0x08,  0x01,0x10,  0x33,0x1A,  0x02,0x87,
     0x01,0x20,  0x00,0x28,  0x00,0x30,  0x00,0x38,
     0xF4,0xFA,  0x02,0x42,  0x24,0x08,  0x03,0x12,
     0x20,0x28,  0x22,0x9C,  0x18,0x55,  0xB1,0x66,
     0x74,0x1E,  0x44,0xAB,  0x8A,0x6E,  0xAC,0x28,
     0x47,0xCE,  0xBD,0x6C,  0xED,0x2D,  0x2F,0x41,
     0x01,0x27,  0x6B,0xF0,  0xFA,0x2B,  0x7B,0xEF,
     0xC6,0x48,  0x00,0x52,  0x04,0x08,  0x01,0x12,
     0x00,0x10,  0x00,0x1A,  0x40,0x8E,  0x92,0x77,
     0x29,0x7E,  0x36,0xEE,  0x11,0xD2,  0x55,0xC8,
     0xE5,0xA4,  0x51,0xE3,  0xA4,0xBD,  0xD3,0x35,
     0x9A,0xB0,  0x60,0xD6,  0x36,0x18,  0x5F,0x93,
     0xF8,0xA5,  0x21,0x09,  0x7B,0x0E,  0xA3,0xF3,
     0x84,0xDD,  0x01,0xC9,  0x84,0x5D,  0x98,0x39,
     0x88,0xD2,  0x77,0x5E,  0x00,0x79,  0xA9,0x9A,
     0x3C,0x50,  0xE3,0x77,  0x43,0x5C,  0xBF,0x42,
     0x6E,0xA1,  0x0F,0x77, 0x14]

size = len(input_data)

print(size)
initial_crc = 0xFFFFFF

crc = crc32_compute(input_data, size, initial_crc)
print(hex(crc))


otherdata = "8a120a0108441201084010011a3387022001280030003800faf442020824120328209c22551866b11e74ab446e8a28acce476cbd2ded412f2701f06b2bfaef7b48c652000804120110001a008e4077927e29ee36d211c855a4e5e351bda435d3b09ad6601836935fa5f809210e7bf3a3dd84c9015d843998d2885e7779009aa9503c77e35c4342bfa16e770f0014"
bytearray = bytes.fromhex(otherdata)
print(len(bytearray ))
print(bytearray)
crc = crc32_compute(bytearray, len(bytearray), initial_crc)
print(hex(crc))